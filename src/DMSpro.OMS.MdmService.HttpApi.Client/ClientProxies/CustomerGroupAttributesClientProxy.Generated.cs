using DMSpro.OMS.MdmService.Shared;
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using DMSpro.OMS.MdmService.CustomerGroupAttributes;
using Volo.Abp.Content;
using DMSpro.OMS.MdmService.Shared;

// ReSharper disable once CheckNamespace
namespace DMSpro.OMS.MdmService.CustomerGroupAttributes.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICustomerGroupAttributesAppService), typeof(CustomerGroupAttributesClientProxy))]
public partial class CustomerGroupAttributesClientProxy : ClientProxyBase<ICustomerGroupAttributesAppService>, ICustomerGroupAttributesAppService
{
    public virtual async Task<PagedResultDto<CustomerGroupAttributeWithNavigationPropertiesDto>> GetListAsync(GetCustomerGroupAttributesInput input)
    {
        return await RequestAsync<PagedResultDto<CustomerGroupAttributeWithNavigationPropertiesDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetCustomerGroupAttributesInput), input }
        });
    }
    public virtual async Task<CustomerGroupAttributeWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
    {
        return await RequestAsync<CustomerGroupAttributeWithNavigationPropertiesDto>(nameof(GetWithNavigationPropertiesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CustomerGroupAttributeDto> GetAsync(Guid id)
    {
        return await RequestAsync<CustomerGroupAttributeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
    public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetCustomerGroupLookupAsync(LookupRequestDto input)
    {
        return await RequestAsync<PagedResultDto<LookupDto<Guid>>>(nameof(GetCustomerGroupLookupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LookupRequestDto), input }
        });
    }
    public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetCustomerAttributeValueLookupAsync(LookupRequestDto input)
    {
        return await RequestAsync<PagedResultDto<LookupDto<Guid>>>(nameof(GetCustomerAttributeValueLookupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LookupRequestDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CustomerGroupAttributeDto> CreateAsync(CustomerGroupAttributeCreateDto input)
    {
        return await RequestAsync<CustomerGroupAttributeDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerGroupAttributeCreateDto), input }
        });
    }

    public virtual async Task<CustomerGroupAttributeDto> UpdateAsync(Guid id, CustomerGroupAttributeUpdateDto input)
    {
        return await RequestAsync<CustomerGroupAttributeDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CustomerGroupAttributeUpdateDto), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(CustomerGroupAttributeExcelDownloadDto input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetListAsExcelFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerGroupAttributeExcelDownloadDto), input }
        });
    }

    public virtual async Task<DownloadTokenResultDto> GetDownloadTokenAsync()
    {
        return await RequestAsync<DownloadTokenResultDto>(nameof(GetDownloadTokenAsync));
    }
}