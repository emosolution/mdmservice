// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using DMSpro.OMS.MdmService.CustomerImages;
using DMSpro.OMS.MdmService.Shared;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace DMSpro.OMS.MdmService.Controllers.CustomerImages;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICustomerImagesAppService), typeof(CustomerImageClientProxy))]
public partial class CustomerImageClientProxy : ClientProxyBase<ICustomerImagesAppService>, ICustomerImagesAppService
{
    public virtual async Task<PagedResultDto<CustomerImageWithNavigationPropertiesDto>> GetListAsync(GetCustomerImagesInput input)
    {
        return await RequestAsync<PagedResultDto<CustomerImageWithNavigationPropertiesDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetCustomerImagesInput), input }
        });
    }

    public virtual async Task<CustomerImageWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
    {
        return await RequestAsync<CustomerImageWithNavigationPropertiesDto>(nameof(GetWithNavigationPropertiesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CustomerImageDto> GetAsync(Guid id)
    {
        return await RequestAsync<CustomerImageDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetCustomerLookupAsync(LookupRequestDto input)
    {
        return await RequestAsync<PagedResultDto<LookupDto<Guid>>>(nameof(GetCustomerLookupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LookupRequestDto), input }
        });
    }

    public virtual async Task<CustomerImageDto> CreateAsync(CustomerImageCreateDto input)
    {
        return await RequestAsync<CustomerImageDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerImageCreateDto), input }
        });
    }

    public virtual async Task<CustomerImageDto> UpdateAsync(Guid id, CustomerImageUpdateDto input)
    {
        return await RequestAsync<CustomerImageDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CustomerImageUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(CustomerImageExcelDownloadDto input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetListAsExcelFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CustomerImageExcelDownloadDto), input }
        });
    }

    public virtual async Task<DownloadTokenResultDto> GetDownloadTokenAsync()
    {
        return await RequestAsync<DownloadTokenResultDto>(nameof(GetDownloadTokenAsync));
    }
}
