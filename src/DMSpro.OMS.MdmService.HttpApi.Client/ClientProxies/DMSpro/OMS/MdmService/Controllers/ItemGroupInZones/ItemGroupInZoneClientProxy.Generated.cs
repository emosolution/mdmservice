// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using DMSpro.OMS.MdmService.ItemGroupInZones;
using DMSpro.OMS.MdmService.Shared;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace DMSpro.OMS.MdmService.Controllers.ItemGroupInZones;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IItemGroupInZonesAppService), typeof(ItemGroupInZoneClientProxy))]
public partial class ItemGroupInZoneClientProxy : ClientProxyBase<IItemGroupInZonesAppService>, IItemGroupInZonesAppService
{
    public virtual async Task<PagedResultDto<ItemGroupInZoneWithNavigationPropertiesDto>> GetListAsync(GetItemGroupInZonesInput input)
    {
        return await RequestAsync<PagedResultDto<ItemGroupInZoneWithNavigationPropertiesDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetItemGroupInZonesInput), input }
        });
    }

    public virtual async Task<ItemGroupInZoneWithNavigationPropertiesDto> GetWithNavigationPropertiesAsync(Guid id)
    {
        return await RequestAsync<ItemGroupInZoneWithNavigationPropertiesDto>(nameof(GetWithNavigationPropertiesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ItemGroupInZoneDto> GetAsync(Guid id)
    {
        return await RequestAsync<ItemGroupInZoneDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetSalesOrgHierarchyLookupAsync(LookupRequestDto input)
    {
        return await RequestAsync<PagedResultDto<LookupDto<Guid>>>(nameof(GetSalesOrgHierarchyLookupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LookupRequestDto), input }
        });
    }

    public virtual async Task<PagedResultDto<LookupDto<Guid>>> GetItemGroupLookupAsync(LookupRequestDto input)
    {
        return await RequestAsync<PagedResultDto<LookupDto<Guid>>>(nameof(GetItemGroupLookupAsync), new ClientProxyRequestTypeValue
        {
            { typeof(LookupRequestDto), input }
        });
    }

    public virtual async Task<ItemGroupInZoneDto> CreateAsync(ItemGroupInZoneCreateDto input)
    {
        return await RequestAsync<ItemGroupInZoneDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ItemGroupInZoneCreateDto), input }
        });
    }

    public virtual async Task<ItemGroupInZoneDto> UpdateAsync(Guid id, ItemGroupInZoneUpdateDto input)
    {
        return await RequestAsync<ItemGroupInZoneDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(ItemGroupInZoneUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetListAsExcelFileAsync(ItemGroupInZoneExcelDownloadDto input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetListAsExcelFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ItemGroupInZoneExcelDownloadDto), input }
        });
    }

    public virtual async Task<DownloadTokenResultDto> GetDownloadTokenAsync()
    {
        return await RequestAsync<DownloadTokenResultDto>(nameof(GetDownloadTokenAsync));
    }
}
